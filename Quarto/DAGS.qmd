---
title: "DAGS"
author: 
  - name: "Jose Angel Govea Garcia"
  - name: "Diego Vértiz Padilla"
  - name: "Daniel Sánchez Fortiz"
  - name: "Augusto Ley Rodriguez"
format:
  html:
    toc: true
    html-math-method: katex
    embed-resources: true
    self-contained-math: true
    df-print: kable
editor: source 
---
Instalamos la librerias que vamos a utilizar
```{r}
#install.packages("tidyverse")

```
Cargamos las librerias que utilizaremos.
```{r}
library(tidyverse)
library(bnlearn)
```

```{r}
library(dplyr)
```

Aqui vamos a cargar los datos que utilizaremos (que son los limpios)

```{r}
data = read_csv("../data_ensanut/datos2.csv")
head(data)
```
Ya teniendo la opinión de los expertos solo utilizaremos las variables que nos dieron. 

Es por eso que vamos a seleccionar las que necesitaremos. 

Pero primero vamos a ver los nombres de las variables que tenemos

```{r}
colnames(data)
```
Ahora si ya tengo mis 17 variables que usaré. Creamos una lista de las variables a utilizar para crear el data de esas variables.
```{r}
vars_usar <- c("desc_ent", "desc_mun", "estrato", "h0302", "h1205", "NOx",
               "COV", "SO_2", "nota03", "valor_COLEST", "valor_TRIG",
               "valor_FERRITINA", "valor_FOL", "valor_HCST","valor_CREAT", "valor_AC_URICO", "valor_HB1AC")
```

creamos un dataframe con solo las variables a usar
```{r}
datos_buenos <- data[, vars_usar]
```

Vemos que se creó correctamente.

```{r}
head(datos_buenos)
```

Ahora como hay algunas observaciones que tienen NA vamos a dropearlas por que el modelo no me permite tener NA

```{r}

datos_ <- na.omit(datos_buenos)
head(datos_)

```

Vamos a contar cuantas columnas tienen NA

```{r}
colSums(is.na(datos_))
```
Perfecto ya no hay ningun na, ahora lo que haremos es cambiar el nombre de las variables (columnas) para que sean mas fáciles de manejar.
E = Entidad
M = Municipio
ES = Estrato
S =  Sexo
C19 = Covid 19
NO = Nivel NOx
CO = Nivel de COv
SO = Nivel de S0_2
MN = Micornutrimentos
C = Colesterol Total
T = Trigliceridos
F = valor de Ferritina
FO = Valor de Fol
H = Valor de HCST
CT = Valor de Creatinina
AC = Valor de Ácido Úrico
HB = Valor de Hemoglobina Glucosilda
```{r}
colnames(datos_) = c("E", "M", "ES", "S", "C19", "NO","CO", "SO", "MN", "C", "T", "F", "FO", "H", "CT", "AC", "HB")
```

Revisamos que si se hayan cambiando los nombre de las variables.

```{r}
head(datos_)
```

Ahora revisamos que informacion contiene la variable de Covid (C19).

```{r}
unique(datos_$C19)
```

Ahora como la varible C19 se significa cuantas veces ha tenido covid desde el 2020. Esta variable nos arroja 1, 2,3 ,4, 98 y 99. Estos se significa 1 = ha tenido una vez covid desde el 2020, 2 = ha tenido 2 veces covid desde el 2020, 3 = ha tenido 3 veces covid desde el 2020, 4 = ha tenido covid 4 veces desde el 2020, 98 = no ha tenido covid desde el 2020, 99 = no recuerda / no contestó.
Entonces lo que haremos es estandarizar esta variable, si la variable es 1,2,3,4 = 1 (si ha tenido covid) y si la variable es 98 ,99 = 0 (no ha tenido covid). Esto para facilitar la dag.

```{r}
datos_ <- datos_ %>%
  mutate(C19 = case_when(
    C19 %in% c(1,2,3,4) ~ 1,   
    C19 %in% c(98,99)   ~ 0, ))

```

```{r}
head(datos_)
```

Checamos los valores de la variables C19

```{r}
unique(datos_$C19)
```
Ahora lo que haremos es como CT (Valor de creatinina) son caracteres. por lo tanto, lo convertimos a numericas. 

```{r}
datos_ <- datos_ %>%
  mutate(CT = as.numeric(str_replace(CT, ",", "\\.")))
```

Checamos que si se haya remplazado:

```{r}
head(datos_)
```


Luego vamos a dropear la columnas de E (Entidad), M (Municipio), S (Sexo), ES(Estrato) C19 (Covid) y el MN (Micronutrimentos). Esto por que no son Continuas. Luego las utilizaremos en otras DAGS 
```{r}

data = datos_ |>
        select(-E,-M, -C19, -MN, -ES, -S)

```

```{r}
head(data)
```

Nos quedaremos con las siguientes, temporalmente.

```{r}
colnames(data)
```

# Creación de DAGS

```{r}
dag1 <- model2network("[NO][CO][SO][CT|NO:CO:SO][AC|NO:CO:SO:CT][HB|NO:SO][F|NO:CO:SO:HB][T|HB:AC:F][C|HB:AC:F][FO][H|NO:CO:SO:FO]")

```

```{r}
graphviz.plot(dag1, shape = "ellipse")
```


```{r}
dag2 <- model2network("[NO][CO][SO][HB|NO:CO:SO][AC|NO:CO:SO][H|NO:CO:SO:FO][FO][F|CT][CT|NO:SO][T|HB:AC][C|HB:AC]")


```

```{r}
graphviz.plot(dag2, shape = "ellipse")

```

```{r}
dag3 <- model2network("[NO][CO][SO][H|NO:CO:SO:FO][FO][F|SO][CT|NO:CO:SO][AC|H:CT][HB|NO:SO][T|HB:AC][C|HB:AC]")
```

```{r}
graphviz.plot(dag3, shape = "ellipse")
```
Comparamos las DAGs dados sus scores:

```{r}
score(dag1, data = data, type = "bic-g")
```

```{r}
score(dag2, data = data, type = "bic-g")
```

```{r}
score(dag3, data = data, type = "bic-g")
```

```{r}
best_dag = hc(data)
str(data)   
```

```{r}
modelstring(best_dag)
```

```{r}
graphviz.plot(best_dag, shape = "ellipse")
```

# Inclusion Variables Categoricas

Vamos a incluir el sexo y el estrato, por lo que dropearemos las mismas varibales que antes menos estas 2
```{r}

data_cat = datos_ |>
        select(-E,-M, -C19, -MN)

```

```{r}
head(data_cat)
```

```{r}
data_cat$ES <- factor(sample(1:3, nrow(data_cat), replace = TRUE), labels = c("Rural", "Urbano", "Metropolitano"))
data_cat$S <- factor(sample(1:2, nrow(data_cat), replace = TRUE), labels = c("Hombre", "Mujer"))
```

```{r}
# Convertir las variables 'ES' y 'S' a factor
data_cat$ES <- as.factor(data_cat$ES)
data_cat$S <- as.factor(data_cat$S)
data_cat$NO <- as.numeric(data_cat$NO)
data_cat$CO <- as.numeric(data_cat$CO)
data_cat$SO <- as.numeric(data_cat$SO)
data_cat$C <- as.numeric(data_cat$C)
data_cat$T <- as.numeric(data_cat$T)
data_cat$F <- as.numeric(data_cat$F)
data_cat$FO <- as.numeric(data_cat$FO)
data_cat$H <- as.numeric(data_cat$H)
data_cat$CT <- as.numeric(data_cat$CT)
data_cat$AC <- as.numeric(data_cat$AC)
data_cat$HB <- as.numeric(data_cat$HB)

# Puedes revisar el tipo de cada columna para confirmarlo
str(data_cat)
```

```{r}
dag_cat <- model2network("[S][ES][NO][CO][SO][H|NO:CO:SO:FO:ES:S][FO][F|SO][CT|NO:CO:SO][AC|H:CT][HB|NO:SO][T|HB:AC][C|HB:AC:ES:S]")
```

```{r}
fitted_model <- bn.fit(dag_cat, data = data_cat)
```


```{r}
graphviz.plot(dag_cat, shape = "ellipse")
```



